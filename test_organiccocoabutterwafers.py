# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

# Opening JSON file
with open('config.json') as f:
  config = json.load(f)

email = config["email"]
firstName = config["firstName"]
lastName = config["lastName"]
address1 = config["address1"]
phone = config["phone"]

class TestOrganiccocoabutterwafers():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_organiccocoabutterwafers(self):
    self.driver.get("https://www.brambleberry.com/shop-by-product/ingredients/butters/organic-cocoa-butter-wafers/V000580.html")
    self.driver.set_window_size(1456, 900)
    element = self.driver.find_element(By.ID, "add-to-cart")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.ID, "add-to-cart").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, ".minicart-icon")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".minicart-icon").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, ".order-est-total .fal")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".order-est-total .fal").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    element = self.driver.find_element(By.NAME, "dwfrm_login_unregistered")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.NAME, "dwfrm_login_unregistered").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    self.driver.find_element(By.ID, "dwfrm_singleshipping_shippingAddress_addressFields_email").click()
    self.driver.find_element(By.ID, "dwfrm_singleshipping_shippingAddress_addressFields_email").send_keys(email)
    self.driver.find_element(By.ID, "dwfrm_singleshipping_shippingAddress_addressFields_confirmemail").send_keys(email)
    self.driver.find_element(By.CSS_SELECTOR, ".secure-checkout-text").click()
    self.driver.find_element(By.ID, "dwfrm_singleshipping_shippingAddress_addressFields_firstName").click()
    self.driver.find_element(By.ID, "dwfrm_singleshipping_shippingAddress_addressFields_firstName").send_keys(firstName)
    self.driver.find_element(By.ID, "dwfrm_singleshipping_shippingAddress_addressFields_lastName").click()
    self.driver.find_element(By.ID, "dwfrm_singleshipping_shippingAddress_addressFields_lastName").send_keys(lastName)
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(3) > td > .required").click()
    self.driver.find_element(By.ID, "dwfrm_singleshipping_shippingAddress_addressFields_address1").click()
    self.driver.find_element(By.ID, "dwfrm_singleshipping_shippingAddress_addressFields_address1").send_keys(address1)
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(3) .required > label").click()
    self.driver.find_element(By.ID, "dwfrm_singleshipping_shippingAddress_addressFields_postal").click()
    self.driver.find_element(By.CSS_SELECTOR, ".ShippingAddressTbl tr:nth-child(5) > td:nth-child(2)").click()
    element = self.driver.find_element(By.NAME, "multicity")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.NAME, "multicity").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(2) > td:nth-child(1) label").click()
    self.driver.find_element(By.ID, "dwfrm_singleshipping_shippingAddress_addressFields_phone").click()
    self.driver.find_element(By.ID, "dwfrm_singleshipping_shippingAddress_addressFields_phone").send_keys(phone)
    self.driver.find_element(By.CSS_SELECTOR, ".form-row:nth-child(4)").click()
    self.driver.find_element(By.NAME, "dwfrm_singleshipping_shippingAddress_save").click()
    self.driver.find_element(By.CSS_SELECTOR, ".order-shipping > .align-right").click()
    self.driver.find_element(By.CSS_SELECTOR, ".order-sales-tax > .align-right").click()
    self.driver.find_element(By.CSS_SELECTOR, ".order-sales-tax > .align-right").click()
    self.driver.find_element(By.CSS_SELECTOR, ".order-totals-table").click()
    self.driver.find_element(By.CSS_SELECTOR, ".order-value").click()
    self.driver.find_element(By.CSS_SELECTOR, ".checkout-order-totals").click()
  
if __name__ == "__main__":
  print("hello world")
  t = TestOrganiccocoabutterwafers()
  t.setup_method(None)
  t.test_organiccocoabutterwafers()
  t.teardown_method(None)